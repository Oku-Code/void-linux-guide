#+TITLE: Void Linux - Installation guide
#+DESCRIPTION: This is a setup guide describing the steps to install void linux with btrfs file system.
#+AUTHOR: Oku-Code
#+DATE: <2023-10-04 miÃ©>
#+OPTIONS: toc2

Hello and welcome, in the following guide i'm going to explain how to
setup and configure *void linux* an independent linux distribution,
there are some tricks to get work with btrfs file system, in this case
i recommend this guide if you want to have the following.

1. Void Linux Installation with the Btrfs file system with snapshots capabilities.
2. Create snapshots to maintain copies for your current system.
3. Configuration for snapper, time schedule and automatic snapshots.
   
#+begin_quote
*Note*: This distributions doesn't have *snapper_gui* you need to manage
 your snapshots manually.
#+end_quote

#+begin_quote
This guide is for intermediate and advance users of linux, don't be
discourage for this message, if you want to learn about linux and know
the basic commands you can use this guide as reference for your
improve your knowledge.

*Before you continue with this installation guide be sure you have
 backups of your data*
#+end_quote

* Table of contents :toc:
- [[#first-stepts][First Stepts]]
  - [[#preparing-the-iso-file][Preparing the iso file]]
- [[#installing-void-linux][Installing Void Linux]]
  - [[#selecting-your-keymaps][Selecting your keymaps]]
  - [[#connecting-to-the-network][Connecting to the network]]
  - [[#updating-xbps-package-manager][Updating xbps package manager]]
  - [[#selecting-the-fastest-mirror][Selecting the fastest mirror]]
  - [[#partitioning-your-disk][Partitioning your disk]]
  - [[#installing-the-base-system][Installing the base system]]
- [[#void-chroot][Void Chroot]]
- [[#configure-snapper-on-void-linux][Configure Snapper on Void Linux]]
- [[#restoring-a-snapshot][Restoring A Snapshot]]
- [[#references][References]]

* First Stepts

** Preparing the iso file
 
1. So let's start, first you need a USB with a minumum capacity of 2GB,
Void Linux iso is so lightweight, you can download it from [[https://voidlinux.org/download/][here]].

#+begin_quote
*Note*: This guide goes to the /glibc/ version of void.
#+end_quote

2. Next, we need to create the live iso, there are some many options
   to do this kind of operation, i recommend to use the following
   programs.
   
   + *Windows*: [[https://rufus.ie/en][Rufus]], [[https://etcher.balena.io/][Balena Etcher]], [[https://www.ventoy.net/en/download.html][Ventoy]].
   + *MacOS*: [[https://etcher.balena.io/][Balena Etcher]], [[https://www.ventoy.net/en/download.html][Ventoy]].
   + *Linux*: [[https://etcher.balena.io/][Balena Etcher]], [[https://www.ventoy.net/en/download.html][Ventoy]]
   
   #+begin_quote
   /Tip/: In linux and MacOS systems you can use the gnu core utils to do this
   without installing aditional software, you can check it out [[https://wiki.archlinux.org/title/USB_flash_installation_medium][here]].
   #+end_quote

 3. Now it's time to boot into the USB, check brand manufacture of
    your motherboard or laptop, in some cases the key is *F11* or *Del*
    but i recommend to search how to start in the boot menu.




* Installing Void Linux

There are two ways to install void, one of them is open a new terminal
if you decide to download the xfce version and type ~void-installer~ or
in the live iso as well, this launch the TUI utility to install void
linux, here i'm going to install it manually, this requires more
effort from your part in order to have the configuration described at
the beginning. 

The following sections contains all the info you might need to success
with the installation, also thanks to [[https://github.com/sascha-wi][Sasha-wi]] to open an issue in
order to improve this installations guide.

Let's start then shall we...

** Selecting your keymaps

By default void comes with US layout keyboard in order to change it
you need to do the following:

1. Search for your keyboard layout: use the following command and look up
   for your desired layout ~ls /usr/share/keymaps/**/*.map.gz | grep less~  
   this will list all the available keymaps and pipe into the less
   command to navigate the list, with vim motiion keys you can
   navigate and letter q to quit.
2. Setting your keys: now select your keyboard layout of choice with
   the ~loadkeys desired-layout~ for example ~loadkeys de-latin1~ for
   german keyboard.

** Connecting to the network

The void xfce iso bring the posibity to connect into the network if
you are using a laptop, if you have a wired connection both the xfce
iso and the live iso will be recognize automatically, you can skip to
the next sections to continue with the installation process.

*** Connecting to a wifi network using wpa_supplicant

Now i'm going to describe how to connect to wifi using wpa_supplicant
utility.

1. Use the ~ip a~ to detect your wireless interface, in some cases will
   be appear like ~wlslp0 or wlan0~ in my case is ~wlo1~.

2. Create a configuration file for your adapter with the touch command
   in the following location: ~touch /etc/wpa_supplicant/wpa_supplicant-wlo1.conf~

   #+begin_quote
   *Note*: Here i'm using interface name in this case ~wlo1~, replace it
    with your adapter's name instead.
   #+end_quote

3. Add the following lines in the adapter config file using vi text
   editor: ~vi /etc/wpa_supplicant/wpa_supplicant-wlo1.conf~
   
   #+begin_src 
   ctrl_inteface=DIR=/run/wpa_supplicant
   update_config=1
   #+end_src

4. Now time to appendthe information about the network using
   wpa_passpharse command: ~wpa_passphrase SSID PASSWORD >>
   /etc/wpa_supplicant/wpa_supplicant-wlo1.conf~, put the name of your
   wireless network in SSID and the password in PASSWORD field.

5. Check the connection using the ping command: ~ping -c 5 https://docs.voidlinux.org~ 
   

** Updating xbps package manager

Now we need to update the xbps package manager, void live isos comes
with an downgraded version, use the following command to update the
xbps package manager ~xbps-install -Sy xbps~, this will be pretty
convinient not only for installed the recent version of packages also
for install some other tools like ~gptfdisk~ and ~xtools~.

** Selecting the fastest mirror

With internet connection ready and xbps package manager updated is
time to change the mirrors for fastest downloads, by default the
mirrors are setting up in /https:///repo-fastly.voidlinux.org/current/
you can change it installing the ~xmirror~ package.

If you want to change the mirrors do the following:

1. Install the xmirror package with ~xbps-install -Sy xmirror~
2. Select the mirror of your choice with ~xmirror -l
   /usr/share/xmirror/mirrors.lst~ this will launch the TUI utility and
   configure your selected mirror of your preference.

#+begin_quote
*Note*: for more information about the available mirrors near to you,
 check it out the [[https://docs.voidlinux.org/xbps/repositories/mirrors/index.html][mirrors]] section from the void linux handbook.
#+end_quote

** Partitioning your disk

*** Considerations

#+begin_quote
*Note*: This step will perform operations to your disk, before you
continue with this, is good idea to previosly create a backup of all
your data or store it in other disk or in the cloud.
*ALL DATA WILL BE LOST !!!*
#+end_quote

Now it's time to create the partitions for your disk, you can use the
~cfdisk~ command to create those partitions, but if you have a gpt label
in your disk is better to install the ~gptfdisk~ package, this package
comes with ~cgdisk~ and ~gdisk~ utility to perform this operations to your disk.

Also in MBR systems with a gpt disk you can create a BIOS partition to install the
bootloader, this partition need to be created at the beginning of the
disk like describe in the [[https://wiki.archlinux.org/title/GRUB#GUID_Partition_Table_(GPT)_specific_instructions][Grub bootloader arch guide]].

#+begin_quote
/Tip/: You can check your partition scheme using the ~lsblk~ command
#+end_quote

You need to create the UEFI partition and the root partition, a home
partition is optional but you can omit this partition if you want, the
uefi partition needs to be a size of 300MB and the code of this
partition is ~ef00~.

*** Creating the filesystems

Next use the ~mkfs~ command to format those partitions, the uefi
partition needs to be formated in f32 file system and the root
partition in btrfs.

- Format the uefi partition: ~mkfs.vfat -F32 /dev/sdx1~
- Format the root partition: ~mkfs.btrfs /dev/sdx2~
  
#+begin_quote
/Tip/: nvme partitions on linux are assigned as ~nvme0n1~ for the disk and
~nvme0n1p1~ for partitions.
#+end_quote

*** Creating the btrfs subvolumes

Here i'm going to create the subvolumes, first mount the root
partition on ~/mnt~ and do the following steps:

1. Suggested layout: i'm going to create the recommended layout
   following this [[https://wiki.archlinux.org/title/Snapper#Suggested_filesystem_layout][scheme]]
2. Creating the subvolumes: use the command ~btrfs subvolume create
   /mnt/@~ to create the root subvolume
3. Create the remaining subvolumes with the same command for ~@home, @var_log, @snapshots~
4. Umount the partition with ~umount /mnt~ command.

#+begin_quote
*Note*: @ symbol is described as the root subvolume where the base system
will be isntalled, you can create more subvolumes as you wish, but for
simplicity i'm keep it as the [[https://wiki.archlinux.org/title/Snapper#Suggested_filesystem_layout][scheme]] recommends.
 
/Tip/: With up arrow you recall the last command, only put after the @
symbol the remaining subvolumes that you need to create.
#+end_quote

*** Mounting the partitions and specifying mount options

Depends of your storage configuration the mount options are
different, here i'm going to describe the most common options, but you
can set different options depending of your needs.

#+begin_quote
/Tip/: for convenience you can create a variable for the btrfs options
to not type all the options, ~BTRFS_OPTS=compress=zstd,autodefrag,space_cache=v2,noatime~
this will be useful later.
#+end_quote

1. For HDD: ~mount -o compress=autodefrag,zstd,noatime,space_cache=v2,subvol=@ /dev/sdx2 /mnt~
2. For SSD or NVME: ~mount -o compress=zstd,noatime,space_cache=v2,subvol=@,discard=async /dev/sdx2 /mnt~
   
#+begin_quote
*Note*: You can change the compression algorithm in the mount options
 like ~lzo~, also i recommend to leave an empty scape for nvme or ssd
 disk to improve performace.
#+end_quote

*** Making the mount directories

With the root partition mounted, now let's create the folders for to
mount the subvolumes and the uefi partition. 

1. ~mkdir -p /mnt/boot/efi~, this is for the uefi partition
2. ~mkdir -p /mnt/{home,.snapshots}~, for the remaining partitions

*** Mounting the subvolumes and the UEFI partition

Let's mount this subvolumes and the remaining partitions

1. *Home*: ~mount -o compress=autodefrag,zstd,noatime,space_cache=v2,subvol=@home /dev/sdx2 /mnt/home~
2. *Snapshots*: ~mount -o compress=autodefrag,zstd,noatime,space_cache=v2,subvol=@snapshots /dev/sdx2 //mnt//.snapshots~
3. *var_log*: ~mount -o compress=autodefrag,zstd,noatime,space_cache=v2,subvol=@var_log /var/log~

** Installing the base system

* Void Chroot

* Configure Snapper on Void Linux

* Restoring A Snapshot

* References
